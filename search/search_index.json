{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS App Mesh Controller For K8s \u00b6 AWS App Mesh Controller For K8s is a controller to help manage App Mesh resources for a Kubernetes cluster. The controller watches custom resources for changes and reflects those changes into the App Mesh API . It is accompanied by the deployment of three custom resource definitions ( CRDs ): meshes, virtualnodes, and virtualservices. These map to App Mesh API objects which the controller manages for you. Documentation \u00b6 Checkout our Live Docs !","title":"Home"},{"location":"#aws-app-mesh-controller-for-k8s","text":"AWS App Mesh Controller For K8s is a controller to help manage App Mesh resources for a Kubernetes cluster. The controller watches custom resources for changes and reflects those changes into the App Mesh API . It is accompanied by the deployment of three custom resource definitions ( CRDs ): meshes, virtualnodes, and virtualservices. These map to App Mesh API objects which the controller manages for you.","title":"AWS App Mesh Controller For K8s"},{"location":"#documentation","text":"Checkout our Live Docs !","title":"Documentation"},{"location":"guide/installation/","text":"AppMesh Installation Guide \u00b6 Via Helm \u00b6 Follow instructions in appmesh-controller helm chart.","title":"Installation"},{"location":"guide/installation/#appmesh-installation-guide","text":"","title":"AppMesh Installation Guide"},{"location":"guide/installation/#via-helm","text":"Follow instructions in appmesh-controller helm chart.","title":"Via Helm"},{"location":"guide/monitoring/","text":"AppMesh Monitoring Guide \u00b6 AppMesh controller supports monitoring the control plane with Prometheus and Grafana. Install Prometheus \u00b6 Follow instructions in appmesh-prometheus helm chart. Install Grafana \u00b6 Follow instructions in appmesh-grafana helm chart.","title":"Monitoring"},{"location":"guide/monitoring/#appmesh-monitoring-guide","text":"AppMesh controller supports monitoring the control plane with Prometheus and Grafana.","title":"AppMesh Monitoring Guide"},{"location":"guide/monitoring/#install-prometheus","text":"Follow instructions in appmesh-prometheus helm chart.","title":"Install Prometheus"},{"location":"guide/monitoring/#install-grafana","text":"Follow instructions in appmesh-grafana helm chart.","title":"Install Grafana"},{"location":"guide/tracing/","text":"AppMesh Tracing Guide \u00b6 AppMesh controller supports integration with multiple tracing solutions for data plane. AWS X-Ray \u00b6 Enable X-Ray tracing for the App Mesh data plane helm upgrade -i appmesh-controller eks/appmesh-controller \\ --namespace appmesh-system \\ --set tracing.enabled = true \\ --set tracing.provider = x-ray The above configuration will inject the AWS X-Ray daemon sidecar in each pod scheduled to run on the mesh. Note : You should restart all pods running inside the mesh after enabling tracing. Datadog tracing \u00b6 Install the Datadog agent in the appmesh-system namespace Enable Datadog Tracing for the App Mesh data plane helm upgrade -i appmesh-controller eks/appmesh-controller \\ --namespace appmesh-system \\ --set tracing.enabled = true \\ --set tracing.provider = datadog \\ --set tracing.address = datadog.appmesh-system \\ --set tracing.port = 8126 Note : You should restart all pods running inside the mesh after enabling tracing. Jaeger tracing \u00b6 Follow instructions in appmesh-jaeger helm chart.","title":"Tracing"},{"location":"guide/tracing/#appmesh-tracing-guide","text":"AppMesh controller supports integration with multiple tracing solutions for data plane.","title":"AppMesh Tracing Guide"},{"location":"guide/tracing/#aws-x-ray","text":"Enable X-Ray tracing for the App Mesh data plane helm upgrade -i appmesh-controller eks/appmesh-controller \\ --namespace appmesh-system \\ --set tracing.enabled = true \\ --set tracing.provider = x-ray The above configuration will inject the AWS X-Ray daemon sidecar in each pod scheduled to run on the mesh. Note : You should restart all pods running inside the mesh after enabling tracing.","title":"AWS X-Ray"},{"location":"guide/tracing/#datadog-tracing","text":"Install the Datadog agent in the appmesh-system namespace Enable Datadog Tracing for the App Mesh data plane helm upgrade -i appmesh-controller eks/appmesh-controller \\ --namespace appmesh-system \\ --set tracing.enabled = true \\ --set tracing.provider = datadog \\ --set tracing.address = datadog.appmesh-system \\ --set tracing.port = 8126 Note : You should restart all pods running inside the mesh after enabling tracing.","title":"Datadog tracing"},{"location":"guide/tracing/#jaeger-tracing","text":"Follow instructions in appmesh-jaeger helm chart.","title":"Jaeger tracing"},{"location":"guide/troubleshooting/","text":"AppMesh Troubleshooting Guide \u00b6 Common Errors \u00b6 Exceeded pod count per VirtualNode limit \u00b6 AppMesh limits pod count per virtualNode. By default the limit is 10. Your can adjust this limit by adjust the \"Connected Envoy processes per virtual node\" service quota . Namespaces is not labeled correctly \u00b6 Namespaces must be labeled with two kind of labels: * appmesh.k8s.aws/sidecarInjectorWebhook: enabled is required on namespaces where pod should be injected with envoy sidecars. * customized labels to make mesh CustomResource selects the namespace via mesh.spec.namespaceSelector . (optional if you have a single Mesh selects all namespaces) Troubleshooting \u00b6 Tail the controller logs: export APPMESH_SYSTEM_NAMESPACE = appmesh-system kubectl logs -n \" ${ APPMESH_SYSTEM_NAMESPACE } \" -f --since 10s \\ $( kubectl get pods -n \" ${ APPMESH_SYSTEM_NAMESPACE } \" -o name | grep controller ) Tail envoy logs: export APPLICATION_NAMESPACE = <your namespace> export APPLICATION = <your pod or deployment> # i.e. deploy/my-app kubectl logs -n \" ${ APPLICATION_NAMESPACE } \" ${ APPLICATION_POD } \" envoy -f --since 10s View envoy configuration: export APPLICATION_NAMESPACE = <your namespace> export APPLICATION = <your pod> kubectl port-forward -n \" ${ APPLICATION_NAMESPACE } \" \\ $( kubectl get pod -n \" ${ APPLICATION_NAMESPACE } \" | grep \" ${ APPLICATION } \" | awk '{print $1}' ) \\ 9901 Then navigate to localhost:9901/ for the index or localhost:9901/config_dump for the envoy config.","title":"Troubleshooting"},{"location":"guide/troubleshooting/#appmesh-troubleshooting-guide","text":"","title":"AppMesh Troubleshooting Guide"},{"location":"guide/troubleshooting/#common-errors","text":"","title":"Common Errors"},{"location":"guide/troubleshooting/#exceeded-pod-count-per-virtualnode-limit","text":"AppMesh limits pod count per virtualNode. By default the limit is 10. Your can adjust this limit by adjust the \"Connected Envoy processes per virtual node\" service quota .","title":"Exceeded pod count per VirtualNode limit"},{"location":"guide/troubleshooting/#namespaces-is-not-labeled-correctly","text":"Namespaces must be labeled with two kind of labels: * appmesh.k8s.aws/sidecarInjectorWebhook: enabled is required on namespaces where pod should be injected with envoy sidecars. * customized labels to make mesh CustomResource selects the namespace via mesh.spec.namespaceSelector . (optional if you have a single Mesh selects all namespaces)","title":"Namespaces is not labeled correctly"},{"location":"guide/troubleshooting/#troubleshooting","text":"Tail the controller logs: export APPMESH_SYSTEM_NAMESPACE = appmesh-system kubectl logs -n \" ${ APPMESH_SYSTEM_NAMESPACE } \" -f --since 10s \\ $( kubectl get pods -n \" ${ APPMESH_SYSTEM_NAMESPACE } \" -o name | grep controller ) Tail envoy logs: export APPLICATION_NAMESPACE = <your namespace> export APPLICATION = <your pod or deployment> # i.e. deploy/my-app kubectl logs -n \" ${ APPLICATION_NAMESPACE } \" ${ APPLICATION_POD } \" envoy -f --since 10s View envoy configuration: export APPLICATION_NAMESPACE = <your namespace> export APPLICATION = <your pod> kubectl port-forward -n \" ${ APPLICATION_NAMESPACE } \" \\ $( kubectl get pod -n \" ${ APPLICATION_NAMESPACE } \" | grep \" ${ APPLICATION } \" | awk '{print $1}' ) \\ 9901 Then navigate to localhost:9901/ for the index or localhost:9901/config_dump for the envoy config.","title":"Troubleshooting"},{"location":"reference/api_design/","text":"AppMesh-K8s integration v1beta2 CRD API design \u00b6 Introduction \u00b6 AppMesh is a service mesh product offered by Amazon. EKS team owns a controller that provides integration between AppMesh and Kubernetes using a custom resource (CRD) API. This document proposes a new version(v1beta2) of CRD API to address issues in current API design(v1beta1). What is the problem \u00b6 There are several issues in the old CRD API model. Details in AppMesh-K8s integration API issues . In summary: The name of Kubernetes resources is tightly coupled with AppMesh names, which is inflexible and confusing. The references between Kubernetes resources is ambiguous and relies on string hacks. The security model for Kubernetes resources is not properly defined. The VirtualNode CRD is implicitly coupled with Deployment resource. The VirtualService cannot directly use VirtualNode as provider Why is it changing \u00b6 We plan to announce k8s AppMesh controller as GA, and we should provide a stable and clean API for better customer experience. Out of scope \u00b6 The detailed implementation of new API is not discussed in this doc. Roles: \u00b6 This document considers two user role: Cluster Administrator: The cluster administrator (ops) is responsible for administration of entire clusters. They manage the lifecycle of AppMesh mesh and provide them to application developers. Application Developer : The application developer (dev) is responsible for defining their application configuration and service composition. Use cases: \u00b6 As a Cluster Administrator for multi-tenant EKS cluster, I should be able to allocate a service mesh and control which users can create resources in this mesh. As an Application Developer, I should be able to define the service routing logic and backend configuration for my application without Cluster Administrator's intervention. Tenets: \u00b6 The API should follow Kubernetes API conventions The API should be unambiguous, there should be only one obvious way for given task The API should be explicit instead of rely on implicit logic The API should be simple for 99% use case The API should be open for future extensions Design \u00b6 API overview \u00b6 We\u2019ll use four CRD to represent AppMesh objects: Mesh: Represents an AppMesh mesh object. VirtualNode: Represents an AppMesh virtualNode object. VirtualService: Represents an AppMesh virtualService object, which can use either VirtualRouter or VirtualNode as provider. VirtualRouter: Represents an AppMesh virtualRouter object and embeds virtualRoute. Detailed changes are discussed below: Decouple k8s resource name from AppMesh resource name \u00b6 Resource names for k8s resources should be decoupled from appMesh resource names. Users should be able to freely denote the resource name for k8s resources independently from appMesh resource names. Sensible default for appMesh resource names can be derived from k8s resource name . Mesh resource have a field \u201c awsName \u201d to denote the AppMesh name for mesh. It defaults to be same as the name of mesh k8s resource. Note: we may consider use other field name like \u201cmeshName\u201d, \u201cawsMeshName\u201d. we choose \u201cawsName\u201d over simply \u201cname\u201d to avoid confusing. This enables use cases like use same resource name(e.g. \u201c global \u201d) for the k8s Mesh resource in different EKS clusters, while maps to different appMesh name. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : global spec : awsName : my-cluster-mesh VirtualService resource have a field \u201c awsName \u201d to denote the AppMesh name for VirtualService. It defaults to be \"$name.$namespace\" of VirtualService k8s resource. Note: the controller is responsible for detecting conflicting awsName with a mesh and report errors . apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a.my-app-ns Alternative designs considered: Enforce bind appMesh virtualServiceName to be VirtualService resource\u2019s name. ( this is existing design used in our controller ) apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualService metadata : namespace : my-app-ns name : my-app-node.my-app-ns.svc.cluster.local spec : ... Pros: * the k8s namespace serves as a scope as a weak guarantee for uniqueness of hostNames. (it\u2019s weak guarantee since there can still be possible hostName conflicts for resources in multiple namespaces) Cons: * harder to extend to multiple hostName support * name of k8s resource tied to appMesh name have an array field \u201c hosts \u201d to denote the AppMesh names for VirtualService For each host, we\u2019ll transparently create an appMesh VirtualService object . It defaults to have single entry of the VirtualService resource\u2019s name. apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : my-app-svc spec : hosts : - my-app-svc.my-app-ns - my-app-svc.my-app-ns.svc.cluster.local Pros: * user friendly if multiple hostname for a service is desired. (under k8s, a pod can use multiple name to contact a service with the help of DNS search list). Cons: * not align with AppMesh API. (we decided not to do this unless appMesh itself supports such API). VirtualNode resource can have a field \u201c awsName \u201d to denote the AppMesh name for VirtualNode. It defaults to be \u201c ${name}_${namespace} \u201d of the VirtualNode resource. Note: we may consider use other field name like \u201cvirtualNodeName\u201d, \u201cawsVirtualNodeName\u201d. we choose \u201cawsName\u201d over simply \u201cname\u201d to avoid confusing. Note: currently controller use \"-\" as separator when build name, but we plan to change it to \"_\" to avoid conflicts with k8s's naming restrictions . This enables use cases like have different app mesh VirtualNode under different context. e.g. for a mesh designated for a single EKS cluster, the default can be \u201c ${name}_${namespace} \u201d. And for a mesh designated to be shared by multiple EKS clusters, the default can be \u201c ${name} ${namespace} ${clusterName} \u201d. The naming pattern can be controlled by immutable attributes on mesh resource in the future(e.g. spec.multiCluster ) apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualNode metadata : namespace : my-app-ns name : node-v1 spec : awsName : node-v1_my-app-ns Use typed references to reference resources within cluster \u00b6 we can use typed reference for relationship between resources within cluster. use virtualNodeRef for reference from VirtualRouter to VirtualNode apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualRouter metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a_my-app-ns listeners : - portMapping : port : 9080 protocol : http routes : - name : route-to-auth http : match : prefix : /auth action : weightedTargets : - virtualNodeRef : namespace : my-app-ns # can be omitted if in same namespace as VirtualRouter name : node-v1 weight : 1 Alternative designs considered: use mangled name of k8s virtualNode resource. ( this is existing design used in our controller ) We can use a mangled name of virtualNode resource. like \u201c ${nodeName} \u201d when referencing a virtualNode within current namespace and \u201c ${nodeName}.${namespace} \u201d when referencing a virtualNode in another namespace. weightedTargets : - virtualNodeName : colorteller.appmesh-demo weight : 4 - virtualNodeName : colorteller-blue weight : 3 - virtualNodeName : colorteller-black.appmesh-demo weight : 3 Cons: * VirtualNodeName here is ambiguous. It\u2019s referencing the name of k8s VirtualNode instead of appMesh VirtualNode. * It string hacks by whether there is a \u201c.\u201d inside and use it as name/namespace separator. while \u201c.\u2018 is valid to be part of name identifier in k8s. * It cannot be extended to support reference external virtualNode in mesh (like a ECS node) use the real name of appMesh virtualNode. We can use the real name of appMesh virtualNode instead of mangled name of k8s object. The above example will be: weightedTargets : - virtualNodeName : colorteller_appmesh-demo weight : 4 - virtualNodeName : colorteller-blue weight : 3 - virtualNodeName : colorteller-black_appmesh-demo weight : 3 Pros: * unambiguous supported both virtualNode in k8s and external like ECS. * simple implementation Cons: * users need to be aware of the name pattern of appMesh objects when want to reference a virtualNode created within cluster. however, it\u2019s subject to change, e.g. we may include a cluster identifier in appMesh name as well if we plan to support multiple cluster. * not k8s native for reference between objects [ optional, not planned ] virtualNodeRef can be extended to support resources outside of k8s cluster. e.g. a ECS virtual node. Note: we using field like \u201cawsName\u201d instead of \u201cvirtualNodeName\u201d to avoid confusing, since \u201cvirtualNodeName\u201d means \u201cname for a k8s virtualNode resource\u201d under k8s\u2019s convention. ```yaml apiVersion: appmesh.k8s.aws/v1beta2 kind: VirtualRouter metadata: namespace: my-app-ns name: svc-a spec: awsName: svc-a_my-app-ns listeners: - portMapping: port: 9080 protocol: http routes: - name: route-to-auth http: match: prefix: /auth action: weightedTargets: - virtualNodeRef: awsName: my-ecs-node weight: 1 1. use virtualServiceRef for references from VirtualNode to VirtualService apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fileds... backends : - virtualService : virtualServiceRef : namespace : my-app-ns # can be omitted if in same namespace as VirtualNode name : my-app-svc Alternative designs considered: use the real name of appMesh virtualService. ( this is existing design used in our controller ) We can use the real name of appMesh virtualService when referencing it in nodes. Pros: * unambiguous supported both virtualService in k8s and external like ECS. * simple implementation Cons: * not k8s native for reference between objects * not consistent with how we reference nodes from services. [ optional, not planned ] virtualServiceRef can be extended to support resources outside of k8s cluster. e.g. a ECS virtual service. Note: we are using field like \u201cawsName\u201d instead of \u201cvirtualServiceName\u201d to avoid confusing, since \u201cvirtualServiceName\u201d means \u201cname for a k8s virtualService resource\u201d under k8s\u2019s convention. apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fields... backends : - virtualService : virtualServiceRef : awsName : \"my-ecs-service\" Decouple VirtualRouter from VirtualService \u00b6 In AppMesh a VirtualService can use either VirtualRouter or VirtualNode as provider. VirtualRouter is only need when L7 routing functionality is needed. We\u2019ll create a new CRD named VirtualRouter , which represents AppMesh VirtualRouter object and embeds multiple AppMesh VirtualRoute objects. apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualRouter metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a_my-app-ns listeners : - portMapping : port : 9080 protocol : http routes : - name : route-to-auth http : match : prefix : /auth action : weightedTargets : - virtualNodeRef : namespace : my-app-ns name : node-v1 weight : 1 Note: The additional hierarchy of \"virtualRouter\" and \"virtualNode\" in addition to \"virtualRouterRef\" and \"virtualNodeRef\" is to align with AppMesh API(so that additional attributes specific to provider can be added easily). VirtualService can reference virtualRouter as provider: apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-a spec : hosts : - svc-b.my-app-ns.svc.cluster.local provider : virtualRouter : virtualRouterRef : namespace : my-app-ns name : svc-a-router VirtualService can reference virtualNode as provider: apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-b spec : hosts : - svc-a.my-app-ns.svc.cluster.local provider : virtualNode : virtualNodeRef : namespace : my-app-ns name : node-v2 Use selector on Mesh to denote mesh membership for resources within namespaces \u00b6 Meshes should be set up by cluster administrator, they can use a selector to designate the mesh membership for resources in different k8s namespaces. Note: The label selectors of two mesh must not overlap. Controller should error if detected conflicting meshes for given resource. Initially, we can assume all resources in a single namespace will always belong to same mesh, so we only need namespaceSelector on Mesh resource. namespaceSelector follows standard label selector semantics, if presents not empty, it selects all namespaces. This also enables use cases like share a AppMesh application configuration since the application specific configuration(virtualNode / virtualService) no longer rely on specific mesh presents. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : global spec : namespaceSelector : matchLabels : mesh : my-mesh --- apiVersion : v1 kind : Namespace metadata : name : my-app-ns labels : mesh : my-mesh [ optional, not planned ] If we need to support resources in a single namespace to belong to different meshes, we can extend above to have a resourceSelector to match labels on resources like VirtualService and VirtualNode in addition to the namespaceSelector. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : my-mesh spec : namespaceSelector : matchLabels : mesh : my-mesh resourceSelector : matchLabels : mesh : my-mesh Alternative designs considered: 1. Use meshName on resources to denote mesh membership. ( this is existing design used in our controller ) Currently we are using a meshName on resources to denote mesh membership . ``` yaml apiVersion : appmesh . k8s . aws / v1beta1 kind : VirtualService metadata : namespace : my - app - ns name : my - app - svc spec : meshName : my - mesh ... other fields ... ``` Pros : * enforced that a resource can only belong to a single mesh . * simple implementation for lookup mesh based on resource . since the meshName is included on resources directly . Cons : * poor security model . a less privileged user limited within namespace can create resources into mesh freely . * requires user to set meshName on every resource even within a namespace . Use annotation on namespaces to denote mesh membership. We can use annotations on namespaces to denote mesh membership. apiVersion : v1 kind : Namespace metadata : name : my-app-ns annotations : appmesh.k8s.aws/mesh-name : my-mesh Pros: * enforced that a resource in a namespace can only belong to a single mesh * simple implementation for lookup mesh based on resource. since the meshName is included on resources\u2019s namespace directly. Cons: * not Kubernetes native. The Kubernetes native way is to use label selector to denote membership. * not possible for extensions like for a single namespace into multiple meshes in the future. Use an array of selectors instead of a single one on mesh resource. Selectors among selectors array are \u201c OR \u201d relationship. And within a selector it\u2019s AND relationship(e.g. resources must match both namespaceSelector & resourceSelector to be member of the mesh) apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : my-mesh spec : selectors : - namespaceSelector : matchLabels : mesh : my-mesh - namespaceSelector : matchLabels : my-mesh : \"true\" resourceSelector : matchLabels : my-mesh : \"true\" Pros: * let user freely define selectors for different use cases. Cons: * over complicated for simple use cases. users should be properly organize their labels to achieve similar effect even under the single selector proposal. Use selector on VirtualNode to denote node membership \u00b6 We use a podSelector to match pods that should be member of virtualNode. Note, we don\u2019t use a namespace selector here since we want to enforce pods are in same namespace of virtualNode resource. The label selectors of two virtualNode within namespace must not overlap. Controller should error if detected conflicting virtualNode for given pod. The injector will be changed to work using following logic: 1. for each pod created, it match against all virtualNode\u2019s selector within namespace. 2. If it finds a single match, injects according to virtualNode\u2019s mesh and name. 3. If it finds multiple match, it reports error. 4. The global \" APPMESH_NAME \" environment variable on injector deployment and annotation \" appmesh.k8s.aws/mesh \" and \" appmesh.k8s.aws/virtualNode \" annotation on pod will no longer be supported. apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fields... podSelector : matchLabels : app : my-app-node --- apiVersion : apps/v1 kind : Deployment metadata : namespace : my-app-ns name : my-app-node-deployment spec : selector : matchLabels : app : my-app-node replicas : 5 template : metadata : labels : app : my-app-node spec : containers : - name : app image : awesomeimage:v1.0.0 ports : - containerPort : 80 Alternative designs considered: The injector use an environment variable for default mesh name and allow override per pod with annotation appmesh.k8s.aws/mesh . Also, the virtualNodeName is derived from pod\u2019s replicaSet\u2019s deployment name and allows override per pod with annotation appmesh.k8s.aws/virtualNode ( this is existing design used in our controller ) Pros: * easy to implement since all information is on pod itself. Cons: * The default behavior to resolve mesh relies on the fact that there is only one mesh in cluster, which conflicts with our multiple mesh per cluster support. * The default behavior to resolve virtualNode is not k8s native. it implies pods are managed by replicaSets then by deployments, which is tricky and not always true. * the annotations are intrusive to user\u2019s application.","title":"APIDesign"},{"location":"reference/api_design/#appmesh-k8s-integration-v1beta2-crd-api-design","text":"","title":"AppMesh-K8s integration v1beta2 CRD API design"},{"location":"reference/api_design/#introduction","text":"AppMesh is a service mesh product offered by Amazon. EKS team owns a controller that provides integration between AppMesh and Kubernetes using a custom resource (CRD) API. This document proposes a new version(v1beta2) of CRD API to address issues in current API design(v1beta1).","title":"Introduction"},{"location":"reference/api_design/#what-is-the-problem","text":"There are several issues in the old CRD API model. Details in AppMesh-K8s integration API issues . In summary: The name of Kubernetes resources is tightly coupled with AppMesh names, which is inflexible and confusing. The references between Kubernetes resources is ambiguous and relies on string hacks. The security model for Kubernetes resources is not properly defined. The VirtualNode CRD is implicitly coupled with Deployment resource. The VirtualService cannot directly use VirtualNode as provider","title":"What is the problem"},{"location":"reference/api_design/#why-is-it-changing","text":"We plan to announce k8s AppMesh controller as GA, and we should provide a stable and clean API for better customer experience.","title":"Why is it changing"},{"location":"reference/api_design/#out-of-scope","text":"The detailed implementation of new API is not discussed in this doc.","title":"Out of scope"},{"location":"reference/api_design/#roles","text":"This document considers two user role: Cluster Administrator: The cluster administrator (ops) is responsible for administration of entire clusters. They manage the lifecycle of AppMesh mesh and provide them to application developers. Application Developer : The application developer (dev) is responsible for defining their application configuration and service composition.","title":"Roles:"},{"location":"reference/api_design/#use-cases","text":"As a Cluster Administrator for multi-tenant EKS cluster, I should be able to allocate a service mesh and control which users can create resources in this mesh. As an Application Developer, I should be able to define the service routing logic and backend configuration for my application without Cluster Administrator's intervention.","title":"Use cases:"},{"location":"reference/api_design/#tenets","text":"The API should follow Kubernetes API conventions The API should be unambiguous, there should be only one obvious way for given task The API should be explicit instead of rely on implicit logic The API should be simple for 99% use case The API should be open for future extensions","title":"Tenets:"},{"location":"reference/api_design/#design","text":"","title":"Design"},{"location":"reference/api_design/#api-overview","text":"We\u2019ll use four CRD to represent AppMesh objects: Mesh: Represents an AppMesh mesh object. VirtualNode: Represents an AppMesh virtualNode object. VirtualService: Represents an AppMesh virtualService object, which can use either VirtualRouter or VirtualNode as provider. VirtualRouter: Represents an AppMesh virtualRouter object and embeds virtualRoute. Detailed changes are discussed below:","title":"API overview"},{"location":"reference/api_design/#decouple-k8s-resource-name-from-appmesh-resource-name","text":"Resource names for k8s resources should be decoupled from appMesh resource names. Users should be able to freely denote the resource name for k8s resources independently from appMesh resource names. Sensible default for appMesh resource names can be derived from k8s resource name . Mesh resource have a field \u201c awsName \u201d to denote the AppMesh name for mesh. It defaults to be same as the name of mesh k8s resource. Note: we may consider use other field name like \u201cmeshName\u201d, \u201cawsMeshName\u201d. we choose \u201cawsName\u201d over simply \u201cname\u201d to avoid confusing. This enables use cases like use same resource name(e.g. \u201c global \u201d) for the k8s Mesh resource in different EKS clusters, while maps to different appMesh name. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : global spec : awsName : my-cluster-mesh VirtualService resource have a field \u201c awsName \u201d to denote the AppMesh name for VirtualService. It defaults to be \"$name.$namespace\" of VirtualService k8s resource. Note: the controller is responsible for detecting conflicting awsName with a mesh and report errors . apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a.my-app-ns Alternative designs considered: Enforce bind appMesh virtualServiceName to be VirtualService resource\u2019s name. ( this is existing design used in our controller ) apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualService metadata : namespace : my-app-ns name : my-app-node.my-app-ns.svc.cluster.local spec : ... Pros: * the k8s namespace serves as a scope as a weak guarantee for uniqueness of hostNames. (it\u2019s weak guarantee since there can still be possible hostName conflicts for resources in multiple namespaces) Cons: * harder to extend to multiple hostName support * name of k8s resource tied to appMesh name have an array field \u201c hosts \u201d to denote the AppMesh names for VirtualService For each host, we\u2019ll transparently create an appMesh VirtualService object . It defaults to have single entry of the VirtualService resource\u2019s name. apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : my-app-svc spec : hosts : - my-app-svc.my-app-ns - my-app-svc.my-app-ns.svc.cluster.local Pros: * user friendly if multiple hostname for a service is desired. (under k8s, a pod can use multiple name to contact a service with the help of DNS search list). Cons: * not align with AppMesh API. (we decided not to do this unless appMesh itself supports such API). VirtualNode resource can have a field \u201c awsName \u201d to denote the AppMesh name for VirtualNode. It defaults to be \u201c ${name}_${namespace} \u201d of the VirtualNode resource. Note: we may consider use other field name like \u201cvirtualNodeName\u201d, \u201cawsVirtualNodeName\u201d. we choose \u201cawsName\u201d over simply \u201cname\u201d to avoid confusing. Note: currently controller use \"-\" as separator when build name, but we plan to change it to \"_\" to avoid conflicts with k8s's naming restrictions . This enables use cases like have different app mesh VirtualNode under different context. e.g. for a mesh designated for a single EKS cluster, the default can be \u201c ${name}_${namespace} \u201d. And for a mesh designated to be shared by multiple EKS clusters, the default can be \u201c ${name} ${namespace} ${clusterName} \u201d. The naming pattern can be controlled by immutable attributes on mesh resource in the future(e.g. spec.multiCluster ) apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualNode metadata : namespace : my-app-ns name : node-v1 spec : awsName : node-v1_my-app-ns","title":"Decouple k8s resource name from AppMesh resource name"},{"location":"reference/api_design/#use-typed-references-to-reference-resources-within-cluster","text":"we can use typed reference for relationship between resources within cluster. use virtualNodeRef for reference from VirtualRouter to VirtualNode apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualRouter metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a_my-app-ns listeners : - portMapping : port : 9080 protocol : http routes : - name : route-to-auth http : match : prefix : /auth action : weightedTargets : - virtualNodeRef : namespace : my-app-ns # can be omitted if in same namespace as VirtualRouter name : node-v1 weight : 1 Alternative designs considered: use mangled name of k8s virtualNode resource. ( this is existing design used in our controller ) We can use a mangled name of virtualNode resource. like \u201c ${nodeName} \u201d when referencing a virtualNode within current namespace and \u201c ${nodeName}.${namespace} \u201d when referencing a virtualNode in another namespace. weightedTargets : - virtualNodeName : colorteller.appmesh-demo weight : 4 - virtualNodeName : colorteller-blue weight : 3 - virtualNodeName : colorteller-black.appmesh-demo weight : 3 Cons: * VirtualNodeName here is ambiguous. It\u2019s referencing the name of k8s VirtualNode instead of appMesh VirtualNode. * It string hacks by whether there is a \u201c.\u201d inside and use it as name/namespace separator. while \u201c.\u2018 is valid to be part of name identifier in k8s. * It cannot be extended to support reference external virtualNode in mesh (like a ECS node) use the real name of appMesh virtualNode. We can use the real name of appMesh virtualNode instead of mangled name of k8s object. The above example will be: weightedTargets : - virtualNodeName : colorteller_appmesh-demo weight : 4 - virtualNodeName : colorteller-blue weight : 3 - virtualNodeName : colorteller-black_appmesh-demo weight : 3 Pros: * unambiguous supported both virtualNode in k8s and external like ECS. * simple implementation Cons: * users need to be aware of the name pattern of appMesh objects when want to reference a virtualNode created within cluster. however, it\u2019s subject to change, e.g. we may include a cluster identifier in appMesh name as well if we plan to support multiple cluster. * not k8s native for reference between objects [ optional, not planned ] virtualNodeRef can be extended to support resources outside of k8s cluster. e.g. a ECS virtual node. Note: we using field like \u201cawsName\u201d instead of \u201cvirtualNodeName\u201d to avoid confusing, since \u201cvirtualNodeName\u201d means \u201cname for a k8s virtualNode resource\u201d under k8s\u2019s convention. ```yaml apiVersion: appmesh.k8s.aws/v1beta2 kind: VirtualRouter metadata: namespace: my-app-ns name: svc-a spec: awsName: svc-a_my-app-ns listeners: - portMapping: port: 9080 protocol: http routes: - name: route-to-auth http: match: prefix: /auth action: weightedTargets: - virtualNodeRef: awsName: my-ecs-node weight: 1 1. use virtualServiceRef for references from VirtualNode to VirtualService apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fileds... backends : - virtualService : virtualServiceRef : namespace : my-app-ns # can be omitted if in same namespace as VirtualNode name : my-app-svc Alternative designs considered: use the real name of appMesh virtualService. ( this is existing design used in our controller ) We can use the real name of appMesh virtualService when referencing it in nodes. Pros: * unambiguous supported both virtualService in k8s and external like ECS. * simple implementation Cons: * not k8s native for reference between objects * not consistent with how we reference nodes from services. [ optional, not planned ] virtualServiceRef can be extended to support resources outside of k8s cluster. e.g. a ECS virtual service. Note: we are using field like \u201cawsName\u201d instead of \u201cvirtualServiceName\u201d to avoid confusing, since \u201cvirtualServiceName\u201d means \u201cname for a k8s virtualService resource\u201d under k8s\u2019s convention. apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fields... backends : - virtualService : virtualServiceRef : awsName : \"my-ecs-service\"","title":"Use typed references to reference resources within cluster"},{"location":"reference/api_design/#decouple-virtualrouter-from-virtualservice","text":"In AppMesh a VirtualService can use either VirtualRouter or VirtualNode as provider. VirtualRouter is only need when L7 routing functionality is needed. We\u2019ll create a new CRD named VirtualRouter , which represents AppMesh VirtualRouter object and embeds multiple AppMesh VirtualRoute objects. apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualRouter metadata : namespace : my-app-ns name : svc-a spec : awsName : svc-a_my-app-ns listeners : - portMapping : port : 9080 protocol : http routes : - name : route-to-auth http : match : prefix : /auth action : weightedTargets : - virtualNodeRef : namespace : my-app-ns name : node-v1 weight : 1 Note: The additional hierarchy of \"virtualRouter\" and \"virtualNode\" in addition to \"virtualRouterRef\" and \"virtualNodeRef\" is to align with AppMesh API(so that additional attributes specific to provider can be added easily). VirtualService can reference virtualRouter as provider: apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-a spec : hosts : - svc-b.my-app-ns.svc.cluster.local provider : virtualRouter : virtualRouterRef : namespace : my-app-ns name : svc-a-router VirtualService can reference virtualNode as provider: apiVersion : appmesh.k8s.aws/v1beta2 kind : VirtualService metadata : namespace : my-app-ns name : svc-b spec : hosts : - svc-a.my-app-ns.svc.cluster.local provider : virtualNode : virtualNodeRef : namespace : my-app-ns name : node-v2","title":"Decouple VirtualRouter from VirtualService"},{"location":"reference/api_design/#use-selector-on-mesh-to-denote-mesh-membership-for-resources-within-namespaces","text":"Meshes should be set up by cluster administrator, they can use a selector to designate the mesh membership for resources in different k8s namespaces. Note: The label selectors of two mesh must not overlap. Controller should error if detected conflicting meshes for given resource. Initially, we can assume all resources in a single namespace will always belong to same mesh, so we only need namespaceSelector on Mesh resource. namespaceSelector follows standard label selector semantics, if presents not empty, it selects all namespaces. This also enables use cases like share a AppMesh application configuration since the application specific configuration(virtualNode / virtualService) no longer rely on specific mesh presents. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : global spec : namespaceSelector : matchLabels : mesh : my-mesh --- apiVersion : v1 kind : Namespace metadata : name : my-app-ns labels : mesh : my-mesh [ optional, not planned ] If we need to support resources in a single namespace to belong to different meshes, we can extend above to have a resourceSelector to match labels on resources like VirtualService and VirtualNode in addition to the namespaceSelector. apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : my-mesh spec : namespaceSelector : matchLabels : mesh : my-mesh resourceSelector : matchLabels : mesh : my-mesh Alternative designs considered: 1. Use meshName on resources to denote mesh membership. ( this is existing design used in our controller ) Currently we are using a meshName on resources to denote mesh membership . ``` yaml apiVersion : appmesh . k8s . aws / v1beta1 kind : VirtualService metadata : namespace : my - app - ns name : my - app - svc spec : meshName : my - mesh ... other fields ... ``` Pros : * enforced that a resource can only belong to a single mesh . * simple implementation for lookup mesh based on resource . since the meshName is included on resources directly . Cons : * poor security model . a less privileged user limited within namespace can create resources into mesh freely . * requires user to set meshName on every resource even within a namespace . Use annotation on namespaces to denote mesh membership. We can use annotations on namespaces to denote mesh membership. apiVersion : v1 kind : Namespace metadata : name : my-app-ns annotations : appmesh.k8s.aws/mesh-name : my-mesh Pros: * enforced that a resource in a namespace can only belong to a single mesh * simple implementation for lookup mesh based on resource. since the meshName is included on resources\u2019s namespace directly. Cons: * not Kubernetes native. The Kubernetes native way is to use label selector to denote membership. * not possible for extensions like for a single namespace into multiple meshes in the future. Use an array of selectors instead of a single one on mesh resource. Selectors among selectors array are \u201c OR \u201d relationship. And within a selector it\u2019s AND relationship(e.g. resources must match both namespaceSelector & resourceSelector to be member of the mesh) apiVersion : appmesh.k8s.aws/v1beta2 kind : Mesh metadata : name : my-mesh spec : selectors : - namespaceSelector : matchLabels : mesh : my-mesh - namespaceSelector : matchLabels : my-mesh : \"true\" resourceSelector : matchLabels : my-mesh : \"true\" Pros: * let user freely define selectors for different use cases. Cons: * over complicated for simple use cases. users should be properly organize their labels to achieve similar effect even under the single selector proposal.","title":"Use selector on Mesh to denote mesh membership for resources within namespaces"},{"location":"reference/api_design/#use-selector-on-virtualnode-to-denote-node-membership","text":"We use a podSelector to match pods that should be member of virtualNode. Note, we don\u2019t use a namespace selector here since we want to enforce pods are in same namespace of virtualNode resource. The label selectors of two virtualNode within namespace must not overlap. Controller should error if detected conflicting virtualNode for given pod. The injector will be changed to work using following logic: 1. for each pod created, it match against all virtualNode\u2019s selector within namespace. 2. If it finds a single match, injects according to virtualNode\u2019s mesh and name. 3. If it finds multiple match, it reports error. 4. The global \" APPMESH_NAME \" environment variable on injector deployment and annotation \" appmesh.k8s.aws/mesh \" and \" appmesh.k8s.aws/virtualNode \" annotation on pod will no longer be supported. apiVersion : appmesh.k8s.aws/v1beta1 kind : VirtualNode metadata : namespace : my-app-ns name : my-app-node spec : ...other fields... podSelector : matchLabels : app : my-app-node --- apiVersion : apps/v1 kind : Deployment metadata : namespace : my-app-ns name : my-app-node-deployment spec : selector : matchLabels : app : my-app-node replicas : 5 template : metadata : labels : app : my-app-node spec : containers : - name : app image : awesomeimage:v1.0.0 ports : - containerPort : 80 Alternative designs considered: The injector use an environment variable for default mesh name and allow override per pod with annotation appmesh.k8s.aws/mesh . Also, the virtualNodeName is derived from pod\u2019s replicaSet\u2019s deployment name and allows override per pod with annotation appmesh.k8s.aws/virtualNode ( this is existing design used in our controller ) Pros: * easy to implement since all information is on pod itself. Cons: * The default behavior to resolve mesh relies on the fact that there is only one mesh in cluster, which conflicts with our multiple mesh per cluster support. * The default behavior to resolve virtualNode is not k8s native. it implies pods are managed by replicaSets then by deployments, which is tricky and not always true. * the annotations are intrusive to user\u2019s application.","title":"Use selector on VirtualNode to denote node membership"},{"location":"reference/api_spec/","text":"Packages: appmesh.k8s.aws/v1beta2 appmesh.k8s.aws/v1beta2 Resource Types: Mesh VirtualNode VirtualRouter VirtualService Mesh Mesh is the Schema for the meshes API Field Description apiVersion string appmesh.k8s.aws/v1beta2 kind string Mesh metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec MeshSpec awsName string (Optional) AWSName is the AppMesh Mesh object\u2019s name. If unspecified or empty, it defaults to be \u201c${name}\u201d of k8s Mesh namespaceSelector Kubernetes meta/v1.LabelSelector (Optional) NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: if present but empty, it selects all namespaces. if absent, it selects no namespace. egressFilter EgressFilter (Optional) The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings. meshOwner string (Optional) The AWS IAM account ID of the service mesh owner. Required if the account ID is not your own. status MeshStatus VirtualNode VirtualNode is the Schema for the virtualnodes API Field Description apiVersion string appmesh.k8s.aws/v1beta2 kind string VirtualNode metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec VirtualNodeSpec awsName string (Optional) AWSName is the AppMesh VirtualNode object\u2019s name. If unspecified or empty, it defaults to be \u201c${name} ${namespace}\u201d of k8s VirtualNode podSelector Kubernetes meta/v1.LabelSelector (Optional) PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: if present but empty, it selects all pods within namespace. if absent, it selects no pod. listeners []Listener (Optional) The listener that the virtual node is expected to receive inbound traffic from serviceDiscovery ServiceDiscovery (Optional) The service discovery information for the virtual node. backends []Backend (Optional) The backends that the virtual node is expected to send outbound traffic to. backendDefaults BackendDefaults (Optional) A reference to an object that represents the defaults for backends. logging Logging (Optional) The inbound and outbound access logging information for the virtual node. meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. status VirtualNodeStatus VirtualRouter VirtualRouter is the Schema for the virtualrouters API Field Description apiVersion string appmesh.k8s.aws/v1beta2 kind string VirtualRouter metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec VirtualRouterSpec awsName string (Optional) AWSName is the AppMesh VirtualRouter object\u2019s name. If unspecified or empty, it defaults to be \u201c${name} ${namespace}\u201d of k8s VirtualRouter listeners []VirtualRouterListener The listeners that the virtual router is expected to receive inbound traffic from routes []Route (Optional) The routes associated with VirtualRouter meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. status VirtualRouterStatus VirtualService VirtualService is the Schema for the virtualservices API Field Description apiVersion string appmesh.k8s.aws/v1beta2 kind string VirtualService metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec VirtualServiceSpec awsName string (Optional) AWSName is the AppMesh VirtualService object\u2019s name. If unspecified or empty, it defaults to be \u201c${name}.${namespace}\u201d of k8s VirtualService provider VirtualServiceProvider (Optional) The provider for virtual services. You can specify a single virtual node or virtual router. meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualService belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. status VirtualServiceStatus AWSCloudMapInstanceAttribute ( Appears on: AWSCloudMapServiceDiscovery ) AWSCloudMapInstanceAttribute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_AwsCloudMapInstanceAttribute.html Field Description key string The name of an AWS Cloud Map service instance attribute key. value string The value of an AWS Cloud Map service instance attribute key. AWSCloudMapServiceDiscovery ( Appears on: ServiceDiscovery ) AWSCloudMapServiceDiscovery refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_AwsCloudMapServiceDiscovery.html Field Description namespaceName string The name of the AWS Cloud Map namespace to use. serviceName string The name of the AWS Cloud Map service to use. attributes []AWSCloudMapInstanceAttribute (Optional) A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance AccessLog ( Appears on: Logging ) AccessLog refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_AccessLog.html Field Description file FileAccessLog (Optional) The file object to send virtual node access logs to. Backend ( Appears on: VirtualNodeSpec ) Backend refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Backend.html Field Description virtualService VirtualServiceBackend Specifies a virtual service to use as a backend for a virtual node. BackendDefaults ( Appears on: VirtualNodeSpec ) BackendDefaults refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_BackendDefaults.html Field Description clientPolicy ClientPolicy (Optional) A reference to an object that represents a client policy. ClientPolicy ( Appears on: BackendDefaults , VirtualServiceBackend ) ClientPolicy refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ClientPolicy.html Field Description tls ClientPolicyTLS (Optional) A reference to an object that represents a Transport Layer Security (TLS) client policy. ClientPolicyTLS ( Appears on: ClientPolicy ) ClientPolicyTLS refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ClientPolicyTls.html Field Description enforce bool (Optional) Whether the policy is enforced. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings. ports []PortNumber (Optional) The range of ports that the policy is enforced for. validation TLSValidationContext A reference to an object that represents a TLS validation context. DNSServiceDiscovery ( Appears on: ServiceDiscovery ) DNSServiceDiscovery refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_DnsServiceDiscovery.html Field Description hostname string Specifies the DNS service discovery hostname for the virtual node. Duration ( Appears on: GRPCRetryPolicy , GRPCTimeout , HTTPRetryPolicy , HTTPTimeout , TCPTimeout ) Field Description unit DurationUnit A unit of time. value int64 A number of time units. DurationUnit ( string alias) ( Appears on: Duration ) EgressFilter ( Appears on: MeshSpec ) EgressFilter refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_EgressFilter.html Field Description type EgressFilterType The egress filter type. EgressFilterType ( string alias) ( Appears on: EgressFilter ) FileAccessLog ( Appears on: AccessLog ) FileAccessLog refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_FileAccessLog.html Field Description path string The file path to write access logs to. GRPCRetryPolicy ( Appears on: GRPCRoute ) GRPCRetryPolicy refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRetryPolicy.html Field Description grpcRetryEvents []GRPCRetryPolicyEvent (Optional) httpRetryEvents []HTTPRetryPolicyEvent (Optional) tcpRetryEvents []TCPRetryPolicyEvent (Optional) maxRetries int64 The maximum number of retry attempts. perRetryTimeout Duration An object that represents a duration of time. GRPCRetryPolicyEvent ( string alias) ( Appears on: GRPCRetryPolicy ) GRPCRoute ( Appears on: Route ) GRPCRoute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRoute.html Field Description match GRPCRouteMatch An object that represents the criteria for determining a request match. action GRPCRouteAction An object that represents the action to take if a match is determined. retryPolicy GRPCRetryPolicy (Optional) An object that represents a retry policy. timeout GRPCTimeout (Optional) An object that represents a grpc timeout. GRPCRouteAction ( Appears on: GRPCRoute ) GRPCRouteAction refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteAction.html Field Description weightedTargets []WeightedTarget An object that represents the targets that traffic is routed to when a request matches the route. GRPCRouteMatch ( Appears on: GRPCRoute ) GRPCRouteMatch refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteMatch.html Field Description methodName string (Optional) The method name to match from the request. If you specify a name, you must also specify a serviceName. serviceName string (Optional) The fully qualified domain name for the service to match from the request. metadata []GRPCRouteMetadata (Optional) An object that represents the data to match from the request. GRPCRouteMetadata ( Appears on: GRPCRouteMatch ) GRPCRouteMetadata refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteMetadata.html Field Description name string The name of the route. match GRPCRouteMetadataMatchMethod (Optional) An object that represents the data to match from the request. invert bool (Optional) Specify True to match anything except the match criteria. The default value is False. GRPCRouteMetadataMatchMethod ( Appears on: GRPCRouteMetadata ) GRPCRouteMetadataMatchMethod refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_GrpcRouteMetadataMatchMethod.html Field Description exact string (Optional) The value sent by the client must match the specified value exactly. prefix string (Optional) The value sent by the client must begin with the specified characters. range MatchRange (Optional) An object that represents the range of values to match on regex string (Optional) The value sent by the client must include the specified characters. suffix string (Optional) The value sent by the client must end with the specified characters. GRPCTimeout ( Appears on: GRPCRoute , ListenerTimeout ) Field Description perRequest Duration (Optional) An object that represents per request timeout duration. idle Duration (Optional) An object that represents idle timeout duration. HTTPRetryPolicy ( Appears on: HTTPRoute ) HTTPRetryPolicy refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRetryPolicy.html Field Description httpRetryEvents []HTTPRetryPolicyEvent (Optional) tcpRetryEvents []TCPRetryPolicyEvent (Optional) maxRetries int64 The maximum number of retry attempts. perRetryTimeout Duration An object that represents a duration of time HTTPRetryPolicyEvent ( string alias) ( Appears on: GRPCRetryPolicy , HTTPRetryPolicy ) HTTPRoute ( Appears on: Route ) HTTPRoute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRoute.html Field Description match HTTPRouteMatch An object that represents the criteria for determining a request match. action HTTPRouteAction An object that represents the action to take if a match is determined. retryPolicy HTTPRetryPolicy (Optional) An object that represents a retry policy. timeout HTTPTimeout (Optional) An object that represents a http timeout. HTTPRouteAction ( Appears on: HTTPRoute ) HTTPRouteAction refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteAction.html Field Description weightedTargets []WeightedTarget An object that represents the targets that traffic is routed to when a request matches the route. HTTPRouteHeader ( Appears on: HTTPRouteMatch ) HTTPRouteHeader refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteHeader.html Field Description name string A name for the HTTP header in the client request that will be matched on. match HeaderMatchMethod (Optional) The HeaderMatchMethod object. invert bool (Optional) Specify True to match anything except the match criteria. The default value is False. HTTPRouteMatch ( Appears on: HTTPRoute ) HTTPRouteMatch refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HttpRouteMatch.html Field Description headers []HTTPRouteHeader (Optional) An object that represents the client request headers to match on. method string (Optional) The client request method to match on. prefix string Specifies the path to match requests with scheme string (Optional) The client request scheme to match on HTTPTimeout ( Appears on: HTTPRoute , ListenerTimeout ) Field Description perRequest Duration (Optional) An object that represents per request timeout duration. idle Duration (Optional) An object that represents idle timeout duration. HeaderMatchMethod ( Appears on: HTTPRouteHeader ) HeaderMatchMethod refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HeaderMatchMethod.html Field Description exact string (Optional) The value sent by the client must match the specified value exactly. prefix string (Optional) The value sent by the client must begin with the specified characters. range MatchRange (Optional) An object that represents the range of values to match on. regex string (Optional) The value sent by the client must include the specified characters. suffix string (Optional) The value sent by the client must end with the specified characters. HealthCheckPolicy ( Appears on: Listener ) HealthCheckPolicy refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_HealthCheckPolicy.html Field Description healthyThreshold int64 The number of consecutive successful health checks that must occur before declaring listener healthy. intervalMillis int64 The time period in milliseconds between each health check execution. path string (Optional) The destination path for the health check request. This value is only used if the specified protocol is http or http2. For any other protocol, this value is ignored. port PortNumber (Optional) The destination port for the health check request. protocol PortProtocol The protocol for the health check request timeoutMillis int64 The amount of time to wait when receiving a response from the health check, in milliseconds. unhealthyThreshold int64 The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. Listener ( Appears on: VirtualNodeSpec ) Listener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Listener.html Field Description portMapping PortMapping The port mapping information for the listener. healthCheck HealthCheckPolicy (Optional) The health check information for the listener. tls ListenerTLS (Optional) A reference to an object that represents the Transport Layer Security (TLS) properties for a listener. timeout ListenerTimeout (Optional) A reference to an object that represents ListenerTLS ( Appears on: Listener ) ListenerTLS refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ListenerTls.html Field Description certificate ListenerTLSCertificate A reference to an object that represents a listener\u2019s TLS certificate. mode ListenerTLSMode ListenerTLS mode ListenerTLSACMCertificate ( Appears on: ListenerTLSCertificate ) ListenerTLSACMCertificate refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ListenerTlsAcmCertificate.html Field Description certificateARN string The Amazon Resource Name (ARN) for the certificate. ListenerTLSCertificate ( Appears on: ListenerTLS ) ListenerTLSCertificate refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ListenerTlsCertificate.html Field Description acm ListenerTLSACMCertificate (Optional) A reference to an object that represents an AWS Certificate Manager (ACM) certificate. file ListenerTLSFileCertificate (Optional) A reference to an object that represents a local file certificate. ListenerTLSFileCertificate ( Appears on: ListenerTLSCertificate ) ListenerTLSFileCertificate refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ListenerTlsFileCertificate.html Field Description certificateChain string The certificate chain for the certificate. privateKey string The private key for a certificate stored on the file system of the virtual node that the proxy is running on. ListenerTLSMode ( string alias) ( Appears on: ListenerTLS ) ListenerTimeout ( Appears on: Listener ) ListenerTimeout refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ListenerTimeout.html Field Description tcp TCPTimeout (Optional) Specifies tcp timeout information for the virtual node. http HTTPTimeout (Optional) Specifies http timeout information for the virtual node. http2 HTTPTimeout (Optional) Specifies http2 information for the virtual node. grpc GRPCTimeout (Optional) Specifies grpc timeout information for the virtual node. Logging ( Appears on: VirtualNodeSpec ) Logging refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_Logging.html Field Description accessLog AccessLog (Optional) The access log configuration for a virtual node. MatchRange ( Appears on: GRPCRouteMetadataMatchMethod , HeaderMatchMethod ) Field Description start int64 (Optional) The start of the range. end int64 (Optional) The end of the range. MeshCondition ( Appears on: MeshStatus ) Field Description type MeshConditionType Type of mesh condition. status Kubernetes core/v1.ConditionStatus Status of the condition, one of True, False, Unknown. lastTransitionTime Kubernetes meta/v1.Time (Optional) Last time the condition transitioned from one status to another. reason string (Optional) The reason for the condition\u2019s last transition. message string (Optional) A human readable message indicating details about the transition. MeshConditionType ( string alias) ( Appears on: MeshCondition ) MeshReference ( Appears on: VirtualNodeSpec , VirtualRouterSpec , VirtualServiceSpec ) MeshReference holds a reference to Mesh.appmesh.k8s.aws Field Description name string Name is the name of Mesh CR uid k8s.io/apimachinery/pkg/types.UID UID is the UID of Mesh CR MeshSpec ( Appears on: Mesh ) MeshSpec defines the desired state of Mesh refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_MeshSpec.html Field Description awsName string (Optional) AWSName is the AppMesh Mesh object\u2019s name. If unspecified or empty, it defaults to be \u201c${name}\u201d of k8s Mesh namespaceSelector Kubernetes meta/v1.LabelSelector (Optional) NamespaceSelector selects Namespaces using labels to designate mesh membership. This field follows standard label selector semantics: if present but empty, it selects all namespaces. if absent, it selects no namespace. egressFilter EgressFilter (Optional) The egress filter rules for the service mesh. If unspecified, default settings from AWS API will be applied. Refer to AWS Docs for default settings. meshOwner string (Optional) The AWS IAM account ID of the service mesh owner. Required if the account ID is not your own. MeshStatus ( Appears on: Mesh ) MeshStatus defines the observed state of Mesh Field Description meshARN string (Optional) MeshARN is the AppMesh Mesh object\u2019s Amazon Resource Name conditions []MeshCondition (Optional) The current Mesh status. observedGeneration int64 (Optional) The generation observed by the Mesh controller. PortMapping ( Appears on: Listener , VirtualRouterListener ) PortMapping refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_PortMapping.html Field Description port PortNumber The port used for the port mapping. protocol PortProtocol The protocol used for the port mapping. PortNumber ( int64 alias) ( Appears on: ClientPolicyTLS , HealthCheckPolicy , PortMapping ) PortProtocol ( string alias) ( Appears on: HealthCheckPolicy , PortMapping ) Route ( Appears on: VirtualRouterSpec ) Route refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_RouteSpec.html Field Description name string Route\u2019s name grpcRoute GRPCRoute (Optional) An object that represents the specification of a gRPC route. httpRoute HTTPRoute (Optional) An object that represents the specification of an HTTP route. http2Route HTTPRoute (Optional) An object that represents the specification of an HTTP/2 route. tcpRoute TCPRoute (Optional) An object that represents the specification of a TCP route. priority int64 (Optional) The priority for the route. ServiceDiscovery ( Appears on: VirtualNodeSpec ) ServiceDiscovery refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_ServiceDiscovery.html Field Description awsCloudMap AWSCloudMapServiceDiscovery (Optional) Specifies any AWS Cloud Map information for the virtual node. dns DNSServiceDiscovery (Optional) Specifies the DNS information for the virtual node. TCPRetryPolicyEvent ( string alias) ( Appears on: GRPCRetryPolicy , HTTPRetryPolicy ) TCPRoute ( Appears on: Route ) TCPRoute refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TcpRoute.html Field Description action TCPRouteAction The action to take if a match is determined. timeout TCPTimeout (Optional) An object that represents a tcp timeout. TCPRouteAction ( Appears on: TCPRoute ) TCPRouteAction refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TcpRouteAction.html Field Description weightedTargets []WeightedTarget An object that represents the targets that traffic is routed to when a request matches the route. TCPTimeout ( Appears on: ListenerTimeout , TCPRoute ) Field Description idle Duration (Optional) An object that represents idle timeout duration. TLSValidationContext ( Appears on: ClientPolicyTLS ) TLSValidationContext refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TlsValidationContext.html Field Description trust TLSValidationContextTrust A reference to an object that represents a TLS validation context trust TLSValidationContextACMTrust ( Appears on: TLSValidationContextTrust ) TLSValidationContextACMTrust refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TlsValidationContextAcmTrust.html Field Description certificateAuthorityARNs []string One or more ACM Amazon Resource Name (ARN)s. TLSValidationContextFileTrust ( Appears on: TLSValidationContextTrust ) TLSValidationContextFileTrust refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TlsValidationContextFileTrust.html Field Description certificateChain string The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on. TLSValidationContextTrust ( Appears on: TLSValidationContext ) TLSValidationContextTrust refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_TlsValidationContextTrust.html Field Description acm TLSValidationContextACMTrust (Optional) A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate. file TLSValidationContextFileTrust (Optional) An object that represents a TLS validation context trust for a local file. VirtualNodeCondition ( Appears on: VirtualNodeStatus ) Field Description type VirtualNodeConditionType Type of VirtualNode condition. status Kubernetes core/v1.ConditionStatus Status of the condition, one of True, False, Unknown. lastTransitionTime Kubernetes meta/v1.Time (Optional) Last time the condition transitioned from one status to another. reason string (Optional) The reason for the condition\u2019s last transition. message string (Optional) A human readable message indicating details about the transition. VirtualNodeConditionType ( string alias) ( Appears on: VirtualNodeCondition ) VirtualNodeReference ( Appears on: VirtualNodeServiceProvider , WeightedTarget ) VirtualNodeReference holds a reference to VirtualNode.appmesh.k8s.aws Field Description namespace string (Optional) Namespace is the namespace of VirtualNode CR. If unspecified, defaults to the referencing object\u2019s namespace name string Name is the name of VirtualNode CR VirtualNodeServiceProvider ( Appears on: VirtualServiceProvider ) VirtualNodeServiceProvider refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualNodeServiceProvider.html Field Description virtualNodeRef VirtualNodeReference (Optional) Reference to Kubernetes VirtualNode CR in cluster that is acting as a service provider. Exactly one of \u2018virtualNodeRef\u2019 or \u2018virtualNodeARN\u2019 must be specified. virtualNodeARN string (Optional) Amazon Resource Name to AppMesh VirtualNode object that is acting as a service provider. Exactly one of \u2018virtualNodeRef\u2019 or \u2018virtualNodeARN\u2019 must be specified. VirtualNodeSpec ( Appears on: VirtualNode ) VirtualNodeSpec defines the desired state of VirtualNode refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualServiceSpec.html Field Description awsName string (Optional) AWSName is the AppMesh VirtualNode object\u2019s name. If unspecified or empty, it defaults to be \u201c${name} ${namespace}\u201d of k8s VirtualNode podSelector Kubernetes meta/v1.LabelSelector (Optional) PodSelector selects Pods using labels to designate VirtualNode membership. This field follows standard label selector semantics: if present but empty, it selects all pods within namespace. if absent, it selects no pod. listeners []Listener (Optional) The listener that the virtual node is expected to receive inbound traffic from serviceDiscovery ServiceDiscovery (Optional) The service discovery information for the virtual node. backends []Backend (Optional) The backends that the virtual node is expected to send outbound traffic to. backendDefaults BackendDefaults (Optional) A reference to an object that represents the defaults for backends. logging Logging (Optional) The inbound and outbound access logging information for the virtual node. meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualNode belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. VirtualNodeStatus ( Appears on: VirtualNode ) VirtualNodeStatus defines the observed state of VirtualNode Field Description virtualNodeARN string (Optional) VirtualNodeARN is the AppMesh VirtualNode object\u2019s Amazon Resource Name conditions []VirtualNodeCondition (Optional) The current VirtualNode status. observedGeneration int64 (Optional) The generation observed by the VirtualNode controller. VirtualRouterCondition ( Appears on: VirtualRouterStatus ) Field Description type VirtualRouterConditionType Type of VirtualRouter condition. status Kubernetes core/v1.ConditionStatus Status of the condition, one of True, False, Unknown. lastTransitionTime Kubernetes meta/v1.Time (Optional) Last time the condition transitioned from one status to another. reason string (Optional) The reason for the condition\u2019s last transition. message string (Optional) A human readable message indicating details about the transition. VirtualRouterConditionType ( string alias) ( Appears on: VirtualRouterCondition ) VirtualRouterListener ( Appears on: VirtualRouterSpec ) VirtualRouterListener refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterListener.html Field Description portMapping PortMapping The port mapping information for the listener. VirtualRouterReference ( Appears on: VirtualRouterServiceProvider ) VirtualRouterReference holds a reference to VirtualRouter.appmesh.k8s.aws Field Description namespace string (Optional) Namespace is the namespace of VirtualRouter CR. If unspecified, defaults to the referencing object\u2019s namespace name string Name is the name of VirtualRouter CR VirtualRouterServiceProvider ( Appears on: VirtualServiceProvider ) VirtualRouterServiceProvider refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterServiceProvider.html Field Description virtualRouterRef VirtualRouterReference (Optional) Reference to Kubernetes VirtualRouter CR in cluster that is acting as a service provider. Exactly one of \u2018virtualRouterRef\u2019 or \u2018virtualRouterARN\u2019 must be specified. virtualRouterARN string (Optional) Amazon Resource Name to AppMesh VirtualRouter object that is acting as a service provider. Exactly one of \u2018virtualRouterRef\u2019 or \u2018virtualRouterARN\u2019 must be specified. VirtualRouterSpec ( Appears on: VirtualRouter ) VirtualRouterSpec defines the desired state of VirtualRouter refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualRouterSpec.html Field Description awsName string (Optional) AWSName is the AppMesh VirtualRouter object\u2019s name. If unspecified or empty, it defaults to be \u201c${name} ${namespace}\u201d of k8s VirtualRouter listeners []VirtualRouterListener The listeners that the virtual router is expected to receive inbound traffic from routes []Route (Optional) The routes associated with VirtualRouter meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualRouter belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. VirtualRouterStatus ( Appears on: VirtualRouter ) VirtualRouterStatus defines the observed state of VirtualRouter Field Description virtualRouterARN string (Optional) VirtualRouterARN is the AppMesh VirtualRouter object\u2019s Amazon Resource Name. routeARNs map[string]string (Optional) RouteARNs is a map of AppMesh Route objects\u2019 Amazon Resource Names, indexed by route name. conditions []VirtualRouterCondition (Optional) The current VirtualRouter status. observedGeneration int64 (Optional) The generation observed by the VirtualRouter controller. VirtualServiceBackend ( Appears on: Backend ) VirtualServiceBackend refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualServiceBackend.html Field Description virtualServiceRef VirtualServiceReference (Optional) Reference to Kubernetes VirtualService CR in cluster that is acting as a virtual node backend. Exactly one of \u2018virtualServiceRef\u2019 or \u2018virtualServiceARN\u2019 must be specified. virtualServiceARN string (Optional) Amazon Resource Name to AppMesh VirtualService object that is acting as a virtual node backend. Exactly one of \u2018virtualServiceRef\u2019 or \u2018virtualServiceARN\u2019 must be specified. clientPolicy ClientPolicy (Optional) A reference to an object that represents the client policy for a backend. VirtualServiceCondition ( Appears on: VirtualServiceStatus ) Field Description type VirtualServiceConditionType Type of VirtualService condition. status Kubernetes core/v1.ConditionStatus Status of the condition, one of True, False, Unknown. lastTransitionTime Kubernetes meta/v1.Time (Optional) Last time the condition transitioned from one status to another. reason string (Optional) The reason for the condition\u2019s last transition. message string (Optional) A human readable message indicating details about the transition. VirtualServiceConditionType ( string alias) ( Appears on: VirtualServiceCondition ) VirtualServiceProvider ( Appears on: VirtualServiceSpec ) VirtualServiceProvider refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_VirtualServiceProvider.html Field Description virtualNode VirtualNodeServiceProvider (Optional) The virtual node associated with a virtual service. virtualRouter VirtualRouterServiceProvider (Optional) The virtual router associated with a virtual service. VirtualServiceReference ( Appears on: VirtualServiceBackend ) VirtualServiceReference holds a reference to VirtualService.appmesh.k8s.aws Field Description namespace string (Optional) Namespace is the namespace of VirtualService CR. If unspecified, defaults to the referencing object\u2019s namespace name string Name is the name of VirtualService CR VirtualServiceSpec ( Appears on: VirtualService ) VirtualServiceSpec defines the desired state of VirtualService Field Description awsName string (Optional) AWSName is the AppMesh VirtualService object\u2019s name. If unspecified or empty, it defaults to be \u201c${name}.${namespace}\u201d of k8s VirtualService provider VirtualServiceProvider (Optional) The provider for virtual services. You can specify a single virtual node or virtual router. meshRef MeshReference (Optional) A reference to k8s Mesh CR that this VirtualService belongs to. The admission controller populates it using Meshes\u2019s selector, and prevents users from setting this field. Populated by the system. Read-only. VirtualServiceStatus ( Appears on: VirtualService ) VirtualServiceStatus defines the observed state of VirtualService Field Description virtualServiceARN string (Optional) VirtualServiceARN is the AppMesh VirtualService object\u2019s Amazon Resource Name. conditions []VirtualServiceCondition (Optional) The current VirtualService status. observedGeneration int64 (Optional) The generation observed by the VirtualService controller. WeightedTarget ( Appears on: GRPCRouteAction , HTTPRouteAction , TCPRouteAction ) WeightedTarget refers to https://docs.aws.amazon.com/app-mesh/latest/APIReference/API_WeightedTarget.html Field Description virtualNodeRef VirtualNodeReference (Optional) Reference to Kubernetes VirtualNode CR in cluster to associate with the weighted target. Exactly one of \u2018virtualNodeRef\u2019 or \u2018virtualNodeARN\u2019 must be specified. virtualNodeARN string (Optional) Amazon Resource Name to AppMesh VirtualNode object to associate with the weighted target. Exactly one of \u2018virtualNodeRef\u2019 or \u2018virtualNodeARN\u2019 must be specified. weight int64 The relative weight of the weighted target. Generated with gen-crd-api-reference-docs on git commit 0b14b71 .","title":"APISpec"},{"location":"tutorials/walkthroughs/","text":"AppMesh Walkthroughs \u00b6 howto-k8s-alb : This example shows how to use ALB Ingress Controller with targets registered as virtual-nodes under App Mesh. howto-k8s-cloudmap : This example shows how Kubernetes deployments can use AWS CloudMap for service-discovery when using App Mesh. howto-k8s-fargate : This example shows how to use AppMesh with EKS on Fargate. howto-k8s-grpc :This example shows how to manage gRPC routes in App Mesh using Kubernetes deployments. howto-k8s-http-headers : This example shows how http routes can use headers for matching incoming requests. howto-k8s-http2 : This example shows how to manage HTTP/2 routes in App Mesh using Kubernetes deployments howto-k8s-retry-policy : This example shows how retry-policies can be used to for Kubernetes applications within the context of App Mesh.","title":"Walkthroughs"},{"location":"tutorials/walkthroughs/#appmesh-walkthroughs","text":"howto-k8s-alb : This example shows how to use ALB Ingress Controller with targets registered as virtual-nodes under App Mesh. howto-k8s-cloudmap : This example shows how Kubernetes deployments can use AWS CloudMap for service-discovery when using App Mesh. howto-k8s-fargate : This example shows how to use AppMesh with EKS on Fargate. howto-k8s-grpc :This example shows how to manage gRPC routes in App Mesh using Kubernetes deployments. howto-k8s-http-headers : This example shows how http routes can use headers for matching incoming requests. howto-k8s-http2 : This example shows how to manage HTTP/2 routes in App Mesh using Kubernetes deployments howto-k8s-retry-policy : This example shows how retry-policies can be used to for Kubernetes applications within the context of App Mesh.","title":"AppMesh Walkthroughs"}]}